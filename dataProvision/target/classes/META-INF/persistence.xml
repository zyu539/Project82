<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0">

	<!-- The JPA specification can be accessed at: http://download.oracle.com/otndocs/jcp/persistence-2_1-fr-eval-spec/index.html 
		Chapter 8 describes Persistent Unit configuration. Section 8.2.1.9 details 
		the JPA properties and their permitted values. Hibernate is a JPA provider 
		(JPA implementation). Hibernate also has properties that can be specified. 
		The following document lists the properties (in chapter 3 (sections 3.3 and 
		3.4): https://docs.jboss.org/hibernate/stable/core.old/reference/en/html 
		Configuration of the embedded H2 database is covered on the H2 website: www.h2database.com -->

	<persistence-unit name="dataProvision">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>PROJECT82.dataProvision.domain.RawPosition</class>
		<class>PROJECT82.dataProvision.domain.Route</class>
		<class>PROJECT82.dataProvision.domain.GridPosition</class>
		<!-- Classes which are to be mapped and therefore persistent. -->
		<properties>
			<!-- Configure the data source. In this case the embedded H2 database 
				is used. -->
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://127.0.0.1:3306/project82" />
			<property name="javax.persistence.jdbc.user" value="edgsb" />
			<property name="javax.persistence.jdbc.password" value="edgsb" />

			<!-- Configure JPA to drop and re-create the SQL schema (tables) in the 
				database at start-up time. This is useful for automated testing, because 
				a clean database is used on each test run. -->
			<property name="javax.persistence.schema-generation.database.action"
				value="drop-and-create" />

			<!-- Configure Hibernate to print out all SQL code that is generated and 
				executed. format_sql causes the output to be formatted and more easily read. 
				use_sql_comments generates comments to explain why the SQL is generated. 
				When these properties are set to true, the output occurs regardless of any 
				log4j output-level settings. -->
			<property name="hibernate.show_sql" value="false" />
			<property name="hibernate.format_sql" value="true" />
			<property name="hibernate.use_sql_comments" value="true" />
		</properties>

	</persistence-unit>

</persistence>